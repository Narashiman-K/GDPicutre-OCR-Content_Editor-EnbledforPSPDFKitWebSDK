// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using ConsoleApp2;
//
//    var jsonStructure = JsonStructure.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace ConsoleApp2
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class JsonStructure
    {
        [JsonPropertyName("ImageRegions")]
        public List<ImageRegion> ImageRegions { get; set; }

        [JsonPropertyName("Images")]
        public object Images { get; set; }

        [JsonPropertyName("Paths")]
        public object Paths { get; set; }

        [JsonPropertyName("Blocks")]
        public List<Block> Blocks { get; set; }

        [JsonPropertyName("Paragraphs")]
        public List<Paragraph> Paragraphs { get; set; }

        [JsonPropertyName("TextLines")]
        public List<TextLine> TextLines { get; set; }

        [JsonPropertyName("Words")]
        public List<Word> Words { get; set; }

        [JsonPropertyName("Characters")]
        public List<Character> Characters { get; set; }

        [JsonPropertyName("Hyperlinks")]
        public object Hyperlinks { get; set; }

        [JsonPropertyName("PageHeight")]
        public long PageHeight { get; set; }

        [JsonPropertyName("PageWidth")]
        public long PageWidth { get; set; }

        [JsonPropertyName("PageHorizontalResolution")]
        public double PageHorizontalResolution { get; set; }

        [JsonPropertyName("PageVerticalResolution")]
        public double PageVerticalResolution { get; set; }

        [JsonPropertyName("InputImageHorizontalResolution")]
        public double InputImageHorizontalResolution { get; set; }

        [JsonPropertyName("InputImageVerticalResolution")]
        public float InputImageVerticalResolution { get; set; }

        [JsonPropertyName("IsFromDigitalLayout")]
        public bool IsFromDigitalLayout { get; set; }

        [JsonPropertyName("ImageTransform")]
        public Transform ImageTransform { get; set; }

        [JsonPropertyName("PDFTransform")]
        public Transform PdfTransform { get; set; }

        [JsonPropertyName("PageRotation")]
        public long PageRotation { get; set; }

        [JsonPropertyName("PageSkewAngle")]
        public double PageSkewAngle { get; set; }

        [JsonPropertyName("Sorted2D")]
        public bool Sorted2D { get; set; }

        [JsonPropertyName("ROI")]
        public Roi Roi { get; set; }

        [JsonPropertyName("WordSegRefined")]
        public bool WordSegRefined { get; set; }

        [JsonPropertyName("DirtyContentRefined")]
        public bool DirtyContentRefined { get; set; }

        [JsonPropertyName("SpeckledRegions")]
        public List<object> SpeckledRegions { get; set; }

        [JsonPropertyName("LineElements")]
        public List<LineElement> LineElements { get; set; }

        [JsonPropertyName("NonTextRegions")]
        public List<Roi> NonTextRegions { get; set; }

        [JsonPropertyName("TableElements")]
        public List<OuterTableBlock> TableElements { get; set; }

        [JsonPropertyName("FormFieldElements")]
        public List<FormFieldElement> FormFieldElements { get; set; }

        [JsonPropertyName("OuterTableBlocks")]
        public List<OuterTableBlock> OuterTableBlocks { get; set; }

        [JsonPropertyName("IsRejected")]
        public bool IsRejected { get; set; }

        [JsonPropertyName("KeyValuePairs")]
        public List<object> KeyValuePairs { get; set; }
    }

    public partial class Block
    {
        [JsonPropertyName("BBox")]
        public Roi BBox { get; set; }

        [JsonPropertyName("FontBBox")]
        public object FontBBox { get; set; }

        [JsonPropertyName("ParentTable")]
        public object ParentTable { get; set; }

        [JsonPropertyName("SpecialFormat")]
        public long SpecialFormat { get; set; }

        [JsonPropertyName("SpecialFormatData")]
        public object SpecialFormatData { get; set; }

        [JsonPropertyName("ParagraphCount")]
        public long ParagraphCount { get; set; }

        [JsonPropertyName("FirstParagraphIndex")]
        public long FirstParagraphIndex { get; set; }

        [JsonPropertyName("WritingDirection")]
        public long WritingDirection { get; set; }

        [JsonPropertyName("Orientation")]
        public long Orientation { get; set; }

        [JsonPropertyName("Type")]
        public long Type { get; set; }

        [JsonPropertyName("DeskewAngle")]
        public double DeskewAngle { get; set; }

        [JsonPropertyName("LineIndex")]
        public long LineIndex { get; set; }

        [JsonPropertyName("BlackPixCount")]
        public long BlackPixCount { get; set; }

        [JsonPropertyName("MergeCount")]
        public long MergeCount { get; set; }

        [JsonPropertyName("IsNegative")]
        public bool IsNegative { get; set; }

        [JsonPropertyName("Id")]
        public long Id { get; set; }
    }

    public partial class Roi
    {
        [JsonPropertyName("Left")]
        public float Left { get; set; }

        [JsonPropertyName("Top")]
        public float Top { get; set; }

        [JsonPropertyName("Right")]
        public float Right { get; set; }

        [JsonPropertyName("Bottom")]
        public float Bottom { get; set; }

        [JsonPropertyName("Width")]
        public float Width { get; set; }

        [JsonPropertyName("Height")]
        public float Height { get; set; }

        [JsonPropertyName("Area")]
        public float Area { get; set; }
    }

    public partial class Character
    {
        [JsonPropertyName("BBox")]
        public Roi BBox { get; set; }

        [JsonPropertyName("BBoxF")]
        public object BBoxF { get; set; }

        [JsonPropertyName("Confidence")]
        public double Confidence { get; set; }

        [JsonPropertyName("Value")]
        public string Value { get; set; }

        [JsonPropertyName("Alternative")]
        public object Alternative { get; set; }
    }

    public partial class FormFieldElement
    {
        [JsonPropertyName("_fieldType")]
        public long FieldType { get; set; }

        [JsonPropertyName("_valueBox")]
        public Roi ValueBox { get; set; }

        [JsonPropertyName("_keyBox")]
        public Roi KeyBox { get; set; }
    }

    public partial class ImageRegion
    {
        [JsonPropertyName("BBox")]
        public Roi BBox { get; set; }

        [JsonPropertyName("Confidence")]
        public float Confidence { get; set; }

        [JsonPropertyName("DroppedLayoutCount")]
        public long DroppedLayoutCount { get; set; }
    }

    public partial class Transform
    {
        [JsonPropertyName("a")]
        public double A { get; set; }

        [JsonPropertyName("b")]
        public double B { get; set; }

        [JsonPropertyName("c")]
        public double C { get; set; }

        [JsonPropertyName("d")]
        public double D { get; set; }

        [JsonPropertyName("e")]
        public double E { get; set; }

        [JsonPropertyName("f")]
        public double F { get; set; }
    }

    public partial class LineElement
    {
        [JsonPropertyName("Elements")]
        public List<Block> Elements { get; set; }

        [JsonPropertyName("BBox")]
        public Roi BBox { get; set; }

        [JsonPropertyName("IsThinLine")]
        public bool IsThinLine { get; set; }

        [JsonPropertyName("IsVertical")]
        public bool IsVertical { get; set; }

        [JsonPropertyName("IsIsolated")]
        public bool IsIsolated { get; set; }

        [JsonPropertyName("LineType")]
        public long LineType { get; set; }

        [JsonPropertyName("AlternateLineType")]
        public long AlternateLineType { get; set; }

        [JsonPropertyName("ParentBox")]
        public object ParentBox { get; set; }
    }

    public partial class OuterTableBlock
    {
        [JsonPropertyName("_headerMode")]
        public long HeaderMode { get; set; }

        [JsonPropertyName("_headerDetectionScore")]
        public double HeaderDetectionScore { get; set; }

        [JsonPropertyName("_maxWordSpacing")]
        public long MaxWordSpacing { get; set; }

        [JsonPropertyName("_colThreshold")]
        public double ColThreshold { get; set; }

        [JsonPropertyName("_keyNValuesScore")]
        public object KeyNValuesScore { get; set; }

        [JsonPropertyName("Attributes")]
        public long Attributes { get; set; }

        [JsonPropertyName("_state")]
        public State State { get; set; }

        [JsonPropertyName("LineElements")]
        public object LineElements { get; set; }

        [JsonPropertyName("IsDirty")]
        public bool IsDirty { get; set; }

        [JsonPropertyName("IsDecoded")]
        public bool IsDecoded { get; set; }
    }

    public partial class State
    {
        [JsonPropertyName("StdRows")]
        public object StdRows { get; set; }

        [JsonPropertyName("StdCols")]
        public object StdCols { get; set; }

        [JsonPropertyName("VerticalLines")]
        public object VerticalLines { get; set; }

        [JsonPropertyName("HorizontalLines")]
        public object HorizontalLines { get; set; }

        [JsonPropertyName("HasStdStructure")]
        public bool HasStdStructure { get; set; }

        [JsonPropertyName("BBox")]
        public Roi BBox { get; set; }

        [JsonPropertyName("LeftBorder")]
        public object LeftBorder { get; set; }

        [JsonPropertyName("TopBorder")]
        public object TopBorder { get; set; }

        [JsonPropertyName("RightBorder")]
        public object RightBorder { get; set; }

        [JsonPropertyName("BottomBorder")]
        public object BottomBorder { get; set; }
    }

    public partial class Paragraph
    {
        [JsonPropertyName("BBox")]
        public Roi BBox { get; set; }

        [JsonPropertyName("FontBBox")]
        public object FontBBox { get; set; }

        [JsonPropertyName("TextLineCount")]
        public long TextLineCount { get; set; }

        [JsonPropertyName("FirstTextLineIndex")]
        public long FirstTextLineIndex { get; set; }

        [JsonPropertyName("Justification")]
        public long Justification { get; set; }

        [JsonPropertyName("IsListItem")]
        public long IsListItem { get; set; }

        [JsonPropertyName("IsCrown")]
        public long IsCrown { get; set; }

        [JsonPropertyName("FirstLineIndent")]
        public long FirstLineIndent { get; set; }
    }

    public partial class TextLine
    {
        [JsonPropertyName("BBox")]
        public Roi BBox { get; set; }

        [JsonPropertyName("WordCount")]
        public long WordCount { get; set; }

        [JsonPropertyName("FirstWordIndex")]
        public long FirstWordIndex { get; set; }

        [JsonPropertyName("BaseLineX1")]
        public long BaseLineX1 { get; set; }

        [JsonPropertyName("BaseLineY1")]
        public long BaseLineY1 { get; set; }

        [JsonPropertyName("BaseLineX2")]
        public long BaseLineX2 { get; set; }

        [JsonPropertyName("BaseLineY2")]
        public long BaseLineY2 { get; set; }

        [JsonPropertyName("RemovedWords")]
        public List<Word> RemovedWords { get; set; }
    }

    public partial class Word
    {
        [JsonPropertyName("BBox")]
        public Roi BBox { get; set; }

        [JsonPropertyName("FontBBox")]
        public object FontBBox { get; set; }

        [JsonPropertyName("CharacterCount")]
        public long CharacterCount { get; set; }

        [JsonPropertyName("FirstCharacterIndex")]
        public long FirstCharacterIndex { get; set; }

        [JsonPropertyName("SpacesBefore")]
        public long SpacesBefore { get; set; }

        [JsonPropertyName("IsFromDictionary")]
        public bool IsFromDictionary { get; set; }

        [JsonPropertyName("WordRecognitionLanguage")]
        public WordRecognitionLanguage WordRecognitionLanguage { get; set; }

        [JsonPropertyName("DataType")]
        public long DataType { get; set; }

        [JsonPropertyName("IsBold")]
        public bool IsBold { get; set; }

        [JsonPropertyName("IsItalic")]
        public bool IsItalic { get; set; }

        [JsonPropertyName("IsUnderlined")]
        public bool IsUnderlined { get; set; }

        [JsonPropertyName("UnderlineColor")]
        public bool UnderlineColor { get; set; }

        [JsonPropertyName("UnderlineIsWave")]
        public bool UnderlineIsWave { get; set; }

        [JsonPropertyName("IsHighlighted")]
        public bool IsHighlighted { get; set; }

        [JsonPropertyName("HighlightColor")]
        public bool HighlightColor { get; set; }

        [JsonPropertyName("HasStrikeThrough")]
        public bool HasStrikeThrough { get; set; }

        [JsonPropertyName("IsMonospace")]
        public bool IsMonospace { get; set; }

        [JsonPropertyName("IsSerif")]
        public bool IsSerif { get; set; }

        [JsonPropertyName("IsSmallcaps")]
        public bool IsSmallcaps { get; set; }

        [JsonPropertyName("FontPointSize")]
        public float FontPointSize { get; set; }

        [JsonPropertyName("UniversalFontID")]
        public long UniversalFontId { get; set; }

        [JsonPropertyName("FontFamilyName")]
        public string FontFamilyName { get; set; }

        [JsonPropertyName("HorizontalScaling")]
        public float HorizontalScaling { get; set; }

        [JsonPropertyName("RenderingMode")]
        public long RenderingMode { get; set; }

        [JsonPropertyName("TextColor")]
        public TextColor TextColor { get; set; }

        [JsonPropertyName("TextStrokeColor")]
        public TextColor TextStrokeColor { get; set; }

        [JsonPropertyName("Confidence")]
        public double Confidence { get; set; }

        [JsonPropertyName("SegConfidence")]
        public double SegConfidence { get; set; }

        [JsonPropertyName("PDFFontObjNum")]
        public long PdfFontObjNum { get; set; }

        [JsonPropertyName("ZOrder")]
        public long ZOrder { get; set; }

        [JsonPropertyName("OCRContext")]
        public long OcrContext { get; set; }

        [JsonPropertyName("NonRefinedBBox")]
        public Roi NonRefinedBBox { get; set; }

        [JsonPropertyName("WordSegRefined")]
        public bool WordSegRefined { get; set; }

        [JsonPropertyName("WordRecRefined")]
        public bool WordRecRefined { get; set; }

        [JsonPropertyName("WordSizeRefined")]
        public bool WordSizeRefined { get; set; }

        [JsonPropertyName("WordCharConfusionRefined")]
        public bool WordCharConfusionRefined { get; set; }

        [JsonPropertyName("NonDictWordsRefinement")]
        public long NonDictWordsRefinement { get; set; }

        [JsonPropertyName("WordBoxRefinement")]
        public long WordBoxRefinement { get; set; }

        [JsonPropertyName("PhotometricMode")]
        public long PhotometricMode { get; set; }

        [JsonPropertyName("RemovedCharCount")]
        public long RemovedCharCount { get; set; }

        [JsonPropertyName("ConnectedComponentCount")]
        public long ConnectedComponentCount { get; set; }

        [JsonPropertyName("HasSuspiciousRecognition")]
        public bool HasSuspiciousRecognition { get; set; }

        [JsonPropertyName("HasSuspiciousSegmentation")]
        public bool HasSuspiciousSegmentation { get; set; }

        [JsonPropertyName("IsFromLowQualityDetection")]
        public bool IsFromLowQualityDetection { get; set; }

        [JsonPropertyName("IsMerged")]
        public bool IsMerged { get; set; }

        [JsonPropertyName("HasIndenticalRefinedRecognition")]
        public bool HasIndenticalRefinedRecognition { get; set; }

        [JsonPropertyName("HasEmptyRefinedRecognition")]
        public bool HasEmptyRefinedRecognition { get; set; }
    }

    public partial class TextColor
    {
        [JsonPropertyName("B")]
        public long B { get; set; }

        [JsonPropertyName("G")]
        public long G { get; set; }

        [JsonPropertyName("R")]
        public long R { get; set; }

        [JsonPropertyName("A")]
        public long A { get; set; }
    }

    public enum WordRecognitionLanguage { Empty, Eng };

    public partial class JsonStructure
    {
        public static JsonStructure FromJson(string json) => JsonSerializer.Deserialize<JsonStructure>(json, ConsoleApp2.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this JsonStructure self) => JsonSerializer.Serialize(self, ConsoleApp2.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                WordRecognitionLanguageConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class WordRecognitionLanguageConverter : JsonConverter<WordRecognitionLanguage>
    {
        public override bool CanConvert(Type t) => t == typeof(WordRecognitionLanguage);

        public override WordRecognitionLanguage Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "":
                    return WordRecognitionLanguage.Empty;
                case "eng":
                    return WordRecognitionLanguage.Eng;
            }
            throw new Exception("Cannot unmarshal type WordRecognitionLanguage");
        }

        public override void Write(Utf8JsonWriter writer, WordRecognitionLanguage value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case WordRecognitionLanguage.Empty:
                    JsonSerializer.Serialize(writer, "", options);
                    return;
                case WordRecognitionLanguage.Eng:
                    JsonSerializer.Serialize(writer, "eng", options);
                    return;
            }
            throw new Exception("Cannot marshal type WordRecognitionLanguage");
        }

        public static readonly WordRecognitionLanguageConverter Singleton = new WordRecognitionLanguageConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                    || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
